@page "/"
@inject HttpClient Http
@using VehiclesUI.Services
@using VehiclesUI.Models
@inject VehiclesService VehiclesService

<h1>Search for Vehicles</h1>

<p>Select Customer and Vehicle Status from dorpdown and press Search</p>

@if (customers == null)
{
    <p><em>Loading...</em></p>
}
else
{
<div>
    <div class="row">
        <div class="col">           
            <select id="customer-select-box" bind="@customerSelect" class="form-control">
                <option value=0>All customers</option>
                @foreach (var customer in customers)
                {
                    <option value=@customer.Id>@customer.FullName</option>
                }
            </select>
        </div>
        <div class="col">
            <select id="status-select-box" bind="@connectedSelect" class="form-control">
                <option value=0>All statuses</option>
                <option value=1>Connected</option>
                <option value=2>Disconnected</option>
            </select>
        </div>
        <div class="col">
            <button class="btn btn-primary" onclick="@SearchAsync">Search</button>
        </div>
    </div>    
</div>

<br>   
}

@if (vehicles == null)
{
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Vehicle ID</th>
                <th>Registration Number</th>
                <th>Connected</th>
                <th>Customer Name</th>
                <th>Customer Address</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var vehicle in vehicles)
            {
            <tr>
                <td>@vehicle.Id</td>
                <td>@vehicle.VehicleId</td>
                <td>@vehicle.RegistrationNumber</td>
                <td>@(vehicle.Connected ? "YES" : "NO")</td>
                <td>@vehicle.Customer.FullName</td>
                <td>@vehicle.Customer.Address</td>
            </tr>
            }
        </tbody>
    </table>
}

@functions {

    Customer[] customers;
    int customerSelect;
    int connectedSelect;    

    Vehicle[] vehicles;

    protected override async Task OnInitAsync()
    {        
        customers = await VehiclesService.GetCustomersAsync();        
    }

    private async Task SearchAsync()
    {
        vehicles = null;

        int? customer = null;
        if (customerSelect > 0)
        {
            customer = customerSelect;
        }

        bool? connected = null;
        if (connectedSelect > 0)
        {
            connected = connectedSelect == 1;
        }

        vehicles = await VehiclesService.GetVehiclesAsync(customer, connected); 
    }
}
